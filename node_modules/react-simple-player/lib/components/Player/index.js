"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var React = tslib_1.__importStar(require("react"));
var p4_css_1 = require("p4-css");
var useAudio_1 = tslib_1.__importDefault(require("react-use/lib/useAudio"));
var useSlider_1 = tslib_1.__importDefault(require("react-use/lib/useSlider"));
var Play_1 = tslib_1.__importDefault(require("../../icons/Play"));
var Pause_1 = tslib_1.__importDefault(require("../../icons/Pause"));
var Volume_1 = tslib_1.__importDefault(require("../../icons/Volume"));
var Muted_1 = tslib_1.__importDefault(require("../../icons/Muted"));
var Rail_1 = require("../Rail");
var RailWrap_1 = require("../RailWrap");
var Volume_2 = require("../Volume");
var createColorManager_1 = tslib_1.__importDefault(require("./createColorManager"));
var formatTime_1 = tslib_1.__importDefault(require("./formatTime"));
var useRef = React.useRef, useEffect = React.useEffect, useState = React.useState, useMemo = React.useMemo;
var ff = '"Open Sans",Roboto,sans-serif';
exports.defaultHeight = 64;
var blockClass = p4_css_1.rule({
    d: 'flex',
    alignItems: 'center',
    bg: '#eee',
    h: exports.defaultHeight + 'px',
    bdrad: '4px',
    w: '100%',
});
var playButtonClass = p4_css_1.rule({
    d: 'flex',
    alignItems: 'center',
    h: '100%',
    pad: '0 16px',
    cur: 'pointer',
    mar: 0,
    bd: 0,
    bg: 'transparent',
    bdrad: '4px',
    '& svg': {
        w: '18px',
        h: '18px',
    },
});
var seekAreaClass = p4_css_1.rule({
    pos: 'relative',
    d: 'flex',
    flex: '1 1 100%',
    alignItems: 'center',
    h: '100%',
    cur: 'pointer',
    cursor: 'ew-resize',
});
var tooltipClass = p4_css_1.rule({
    pos: 'absolute',
    op: 0.9,
});
var tooltipInnerClass = p4_css_1.rule({
    d: 'inline-block',
    mar: '0 0 0 -50%',
    pad: '4px 8px',
    fz: '12px',
    ff: ff,
    bdrad: '3px',
    whiteSpace: 'nowrap',
});
var timeClass = p4_css_1.rule({
    whiteSpace: 'nowrap',
    userSelect: 'none',
    pad: '0 0 0 16px',
    ff: ff,
    fz: '12px',
});
var volumeButtonClass = p4_css_1.rule({
    d: 'flex',
    alignItems: 'center',
    h: '100%',
    pad: '0 16px',
    cur: 'pointer',
    mar: 0,
    bd: 0,
    bg: 'transparent',
    bdrad: '4px',
    '& svg': {
        w: '18px',
        h: '18px',
    },
});
exports.Player = function (_a) {
    var src = _a.src, _b = _a.height, height = _b === void 0 ? exports.defaultHeight : _b, _c = _a.grey, grey = _c === void 0 ? [246, 248, 250] : _c, _d = _a.accent, accent = _d === void 0 ? [255, 0, 0] : _d, autoPlay = _a.autoPlay, hideVolume = _a.hideVolume, controlsRef = _a.controls, stateRef = _a.state, audioRef = _a.audio, onState = _a.onState;
    var color = useMemo(function () { return createColorManager_1.default(grey, accent); }, tslib_1.__spreadArrays(grey, accent));
    var _e = useState(false), hovered = _e[0], setHovered = _e[1];
    var _f = useAudio_1.default({
        src: src,
        autoPlay: !!autoPlay,
    }), audio = _f[0], state = _f[1], controls = _f[2], ref = _f[3];
    var _g = React.useState(false), seekHover = _g[0], setSeekHover = _g[1];
    var buttonHoverClass = p4_css_1.nano.cache({
        svg: {
            fill: color.contrast(0.8),
        },
        '&:hover': {
            bg: color.contrast(0.02),
            svg: {
                fill: color.contrast(1),
            },
        },
        '&:active': {
            bg: color.contrast(0.04),
        },
    });
    var latestState = useRef(state);
    latestState.current = state;
    var latestControls = useRef(controls);
    latestControls.current = controls;
    var seekAreaRef = useRef(null);
    var seek = useSlider_1.default(seekAreaRef, {
        onScrubStop: function (value) {
            if (!latestState.current.duration)
                return;
            latestControls.current.seek(Math.round(latestState.current.duration * value));
        },
    });
    if (stateRef)
        stateRef.current = state;
    if (controlsRef)
        controlsRef.current = controls;
    if (audioRef)
        audioRef.current = ref.current;
    useEffect(function () {
        if (onState)
            onState(state);
    }, [state]);
    var style = {
        background: hovered ? color.shift(-6) : color.shift(0),
    };
    var playIconStyle = {
        fill: color.contrast(0.85),
    };
    if (height !== exports.defaultHeight) {
        style.height = height;
    }
    var mainButton = (React.createElement("button", { className: playButtonClass + buttonHoverClass, onClick: function () {
            if (state.paused)
                controls.play();
            else
                controls.pause();
        } }, state.paused ? React.createElement(Play_1.default, { style: playIconStyle }) : React.createElement(Pause_1.default, null)));
    var seekArea = (React.createElement("span", { ref: seekAreaRef, className: seekAreaClass, onMouseEnter: function () { return setSeekHover(true); }, onMouseLeave: function () { return setSeekHover(false); } },
        React.createElement(RailWrap_1.RailWrap, null,
            React.createElement(Rail_1.Rail, { value: 1, color: seekHover ? color.contrast(0.12) : color.contrast(0.08) }),
            !!state.duration &&
                !!state.buffered &&
                state.buffered.map(function (_a) {
                    var start = _a.start, end = _a.end;
                    return (React.createElement(Rail_1.Rail, { value: (end - start) / state.duration, skip: start / state.duration, color: color.contrast(0.08) }));
                }),
            !!state.duration && (React.createElement(Rail_1.Rail, { value: (state.time || 0) / state.duration, color: state.paused
                    ? color.shade(0.4)
                    : seek.isSliding
                        ? "rgba(" + accent[0] + "," + accent[1] + "," + accent[2] + ",.5)"
                        : "rgb(" + accent[0] + "," + accent[1] + "," + accent[2] + ")" })),
            !!seek.isSliding && React.createElement(Rail_1.Rail, { value: seek.value, color: "rgba(" + accent[0] + "," + accent[1] + "," + accent[2] + ",.6)" })),
        !!state.duration && seek.isSliding && (React.createElement("span", { className: tooltipClass, style: {
                top: -30 + height / 2 + 'px',
                left: seek.isSliding ? 100 * seek.value + "%" : (100 * state.time) / state.duration + "%",
            } },
            React.createElement("span", { className: tooltipInnerClass, style: { background: '#000', color: '#fff' } }, formatTime_1.default(seek.value * state.duration))))));
    var volumeButton = (React.createElement("button", { className: volumeButtonClass + buttonHoverClass, onClick: function () {
            if (state.muted)
                controls.unmute();
            else
                controls.mute();
        } }, state.muted || !state.volume ? (React.createElement(Muted_1.default, { style: { fill: color.contrast(0.85) } })) : (React.createElement(Volume_1.default, { style: { fill: color.contrast(0.85) } }))));
    return (React.createElement("span", { className: blockClass, style: style, onMouseEnter: function () { return setHovered(true); }, onMouseLeave: function () { return setHovered(false); } },
        audio,
        mainButton,
        seekArea,
        !!state.duration && (React.createElement("span", { className: timeClass, style: { color: color.contrast(0.85) } }, formatTime_1.default(state.time) + ' / ' + formatTime_1.default(state.duration))),
        volumeButton,
        !hideVolume && (React.createElement(Volume_2.Volume, { value: state.volume || 0, onChange: function (value) { return controls.volume(value); }, bg: color.contrast(0.06), rail: color.contrast(0.12), railHover: color.contrast(0.18) }))));
};
